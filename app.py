import pickle
from pathlib import Path

import streamlit_authenticator as stauth  # pip install streamlit-authenticator

import streamlit as st
import pandas as pd
import joblib
import gspread
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load('model.pkl')

def authenticate_gspread():
    # Load Google Sheets API credentials
    from read_json import response_json
    response_ = response_json()
    sa = gspread.service_account_from_dict(response_)
    return sa

# Function to save data to Google Sheets
def save_to_gsheet(new_row, max_retries=3):
    for attempt in range(max_retries):
        try:
            # Authenticate with Google Sheets
            gc = authenticate_gspread()

            # Open the spreadsheet
            sh = gc.open("Manzilsoz")
            worksheet = sh.worksheet("ScoringDB")

            # Check if there's any content in the worksheet
            existing_data = worksheet.get_all_values()

            # Get existing headers if they exist
            headers = existing_data[0] if existing_data else None

            if not headers:
                headers = ['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–§–∏–ª–∏–∞–ª', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä', '–§–ò–û', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', '–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞', '–ü–µ—Ä–∏–æ–¥',
                        '–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤(–∏—Å—Ç–æ—Ä–∏—è)', '–†–µ–∑—É–ª—å—Ç–∞—Ç', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞', '–î–∞—Ç–∞',
                        '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞', '–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–ò–∂–¥–∏–≤–µ–Ω—Ü—ã']
                worksheet.append_row(headers)

            # Convert the new_row DataFrame to a list and append it to the worksheet
            new_row = new_row[['Manager','district', 'phone', 'name', 'age', 'gender', 'amount', 'duration',
                            'marital_status', "credit_history_count", 'Result', 'Probability', 'Date', 'DocumentNumber',
                            'occupation', 'salary_level', 'work_experience', 'dependents']]
            new_row_list = new_row.values.tolist()
            worksheet.append_rows(new_row_list)
            return True
        except Exception as e:
            if attempt == max_retries - 1:  # Last attempt
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                return False
            time.sleep(2)  # Wait before retrying
    return False

st.set_page_config(
    page_title="Kredit Market",
    layout="wide"
)

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
    <style>
        section[data-testid="stSidebar"] {
            width: 40px !important;
            background-color: white;
        }
        .block-container {
            padding-top: 1rem;
            padding-bottom: 0rem;
            padding-left: 5rem;
            padding-right: 5rem;
        }
        .stSelectbox {
            margin-bottom: 1rem;
        }
        .stNumberInput {
            margin-bottom: 1rem;
        }
        .stTextInput {
            margin-bottom: 1rem;
        }
        div[data-testid="stVerticalBlock"] > div {
            padding: 0.5rem;
            background-color: #f8f9fa;
            border-radius: 5px;
            margin-bottom: 0.5rem;
        }
        button[kind="primary"] {
            background-color: #ff4b4b;
            color: white;
            border-radius: 5px;
            padding: 0.5rem 2rem;
            margin-top: 1rem;
        }
        .stAlert {
            background-color: #f8d7da;
            color: #721c24;
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1rem;
        }
    </style>
""", unsafe_allow_html=True)

names = ["–ë–æ–ª—Ç–∞–±–æ–µ–≤ –ê—Å–ª–∏–¥–¥–∏–Ω", "–§–∞–π–∑–∏–µ–≤ –¢–∏–º—É—Ä"]
usernames = ["aslidin", "timur"]

# load hashed passwords
file_path = Path(__file__).parent / "hashed_pw.pkl"
with file_path.open("rb") as file:
    hashed_passwords = pickle.load(file)

authenticator = stauth.Authenticate(names, usernames, hashed_passwords,
    "sales_dashboard", "abcdef", cookie_expiry_days=30)

name, authentication_status, username = authenticator.login("Login", "main")

if authentication_status == False:
    st.error("Username/password is incorrect")

if authentication_status == None:
    st.warning("Please enter your username and password")

if authentication_status:
    authenticator.logout("–í—ã—Ö–æ–¥", "sidebar")
    st.image("logo manzilsoz.png", use_column_width=False, width=150)
    st.title('–ú–æ–¥–µ–ª—å —Å–∫–æ—Ä–∏–Ω–≥–∞')

    # –°–æ–∑–¥–∞–µ–º 4 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        manager = st.selectbox('–ú–µ–Ω–µ–¥–∂–µ—Ä', [name])
        district_options = {
            "–ë–æ–ª—Ç–∞–±–æ–µ–≤ –ê—Å–ª–∏–¥–¥–∏–Ω": ["–î–∂–∞–±–±–æ—Ä –†–∞—Å—É–ª–æ–≤", "–°–ø–∏—Ç–∞–º–µ–Ω"],
            "–§–∞–π–∑–∏–µ–≤ –¢–∏–º—É—Ä": ["–î–∂–∞–±–±–æ—Ä –†–∞—Å—É–ª–æ–≤", "–°–ø–∏—Ç–∞–º–µ–Ω"]
        }
        available_districts = district_options.get(manager, ["–î—É—à–∞–Ω–±–µ"])
        district = st.selectbox('–§–∏–ª–∏–∞–ª', available_districts)
        name_input = st.text_input('–§–ò–û', '')
        age = st.number_input('–í–æ–∑—Ä–∞—Å—Ç', value=24, step=1)

    with col2:
        gender = st.selectbox('–ü–æ–ª', ['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞'])
        marital_status = st.selectbox('–°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
            ['–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º', '–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º', '–í–¥–æ–≤–∞/–í–¥–æ–≤–µ—Ü', '–†–∞–∑–≤–µ–¥–µ–Ω'])
        amount = st.number_input('–°—É–º–º–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∏', value=0,
            help="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Å—Ä–æ—á–∫–∏")
        duration = st.selectbox('–°—Ä–æ–∫', [3, 6, 9, 12])

    with col3:
        phone = st.text_input('–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä', value=None,
            placeholder="928009292")
        credit_history_count = st.number_input(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ (–∏—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞)', value=0, step=1)
        kredit = st.selectbox('–ê–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç –≤ –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–∞—Ö',
            ['–ù–µ—Ç', "–î–∞"])
        occupation = st.selectbox('–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            ['–¢–æ—Ä–≥–æ–≤–ª—è', '–£—Å–ª—É–≥–∏', '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ',
             '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª—É–∂–∞—â–∏–π', '–ß–∞—Å—Ç–Ω—ã–π —Å–µ–∫—Ç–æ—Ä', '–î—Ä—É–≥–æ–µ'])

    with col4:
        salary_level = st.selectbox('–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã',
            ['–¥–æ 3000', '–æ—Ç 3000 –¥–æ 5000', '–æ—Ç 5000 –¥–æ 10000', '–æ—Ç 10000'])
        work_experience = st.selectbox('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
            ['–ù–µ—Ç –æ–ø—ã—Ç–∞', '–¥–æ 1 –≥–æ–¥–∞', '–æ—Ç 1 –¥–æ 3 –ª–µ—Ç', '–æ—Ç 3 –¥–æ 5 –ª–µ—Ç', '–æ—Ç 5 –ª–µ—Ç'])
        dependents = st.selectbox('–ò–∂–¥–∏–≤–µ–Ω—Ü—ã', [1, 2, 3, 4, 5])

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    col1, col2, col3 = st.columns([1,1,1])
    with col2:
        if st.button('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–∏–Ω–≥', type="primary"):
            try:
                current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                document_number = f'Doc_{current_date.replace(" ", "_").replace(":", "_")}'
                mapping_dis = {
                    "–î—É—à–∞–Ω–±–µ": "dushanbe",
                    "–•—É–¥–∂–∞–Ω–¥": "khujand",
                    "–ü–µ–Ω–¥–∂–∏–∫–µ–Ω—Ç": "panjakent",
                    "–î–∂–∞–±–±–æ—Ä –†–∞—Å—É–ª–æ–≤": "j.rasulov",
                    "–°–ø–∏—Ç–∞–º–µ–Ω": "spitamen"
                }
                mapping_mar = {
                    '–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º': 'married',
                    '–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º':'single',
                    '–í–¥–æ–≤–∞/–í–¥–æ–≤–µ—Ü':'widow/widower',
                    '–†–∞–∑–≤–µ–¥–µ–Ω':'divorced'
                }

                input_data = pd.DataFrame({
                    'age': [age],
                    'amount': [amount],
                    'credit_history_count': [credit_history_count],
                    'district': [mapping_dis[district]],
                    'duration': [duration],
                    'gender': [1 if gender == '–ú—É–∂—á–∏–Ω–∞' else 0],
                    'marital_status': [mapping_mar[marital_status]],
                })

                prediction = model.predict_proba(input_data)[:, 0]

                # Prepare data for saving
                input_data['Manager'] = manager
                input_data['district'] = district
                input_data['name'] = name_input
                input_data['phone'] = phone
                input_data['Result'] = '–û–¥–æ–±—Ä–µ–Ω–æ' if prediction > 1 - 0.15 else '–û—Ç–∫–∞–∑–∞–Ω–æ'
                input_data['gender'] = gender
                input_data['marital_status'] = marital_status
                input_data['Probability'] = f'{round(prediction[0]*100, 2)}%'
                input_data['Date'] = current_date
                input_data['DocumentNumber'] = document_number
                input_data['occupation'] = occupation
                input_data['salary_level'] = salary_level
                input_data['work_experience'] = work_experience
                input_data['dependents'] = dependents

                # Save data first
                save_success = save_to_gsheet(input_data)

                # Then show results and generate PDF
                if kredit == "–î–∞":
                    st.error('–û—Ç–∫–∞–∑–∞–Ω–æ! üòû')
                else:
                    st.write(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞: {round(prediction[0]*100, 2)}%')
                    if prediction > 1 - 0.15:
                        st.success('–û–¥–æ–±—Ä–µ–Ω–æ! üéâ')
                        st.balloons()
                    else:
                        st.error('–û—Ç–∫–∞–∑–∞–Ω–æ! üòû')

                # Generate PDF after showing results
                try:
                    generate_pdf(input_data, document_number, current_date)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {str(e)}")

            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    with top_right:
        def authenticate_gspread():
            # Load Google Sheets API credentials
            from  read_json import  response_json
            response_ = response_json()
            sa = gspread.service_account_from_dict(response_)
            return sa

        # Function to duplicate data to Google Sheets
        def save_to_gsheet(new_row, max_retries=3):
            for attempt in range(max_retries):
                try:
                    # Authenticate with Google Sheets
                    gc = authenticate_gspread()

                    # Open the spreadsheet
                    sh = gc.open("Manzilsoz")
                    worksheet = sh.worksheet("ScoringDB")

                    # Check if there's any content in the worksheet
                    existing_data = worksheet.get_all_values()

                    # Get existing headers if they exist
                    headers = existing_data[0] if existing_data else None

                    if not headers:
                        headers = ['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–§–∏–ª–∏–∞–ª', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä', '–§–ò–û', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', '–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞', '–ü–µ—Ä–∏–æ–¥',
                                '–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤(–∏—Å—Ç–æ—Ä–∏—è)', '–†–µ–∑—É–ª—å—Ç–∞—Ç', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞', '–î–∞—Ç–∞',
                                '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞', '–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–ò–∂–¥–∏–≤–µ–Ω—Ü—ã']
                        worksheet.append_row(headers)

                    # Convert the new_row DataFrame to a list and append it to the worksheet
                    new_row = new_row[['Manager','district', 'phone', 'name', 'age', 'gender', 'amount', 'duration',
                                    'marital_status', "credit_history_count", 'Result', 'Probability', 'Date', 'DocumentNumber',
                                    'occupation', 'salary_level', 'work_experience', 'dependents']]
                    new_row_list = new_row.values.tolist()
                    worksheet.append_rows(new_row_list)
                    return True
                except Exception as e:
                    if attempt == max_retries - 1:  # Last attempt
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                        return False
                    time.sleep(2)  # Wait before retrying
            return False
